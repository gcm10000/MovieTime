// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TchotchomereCore.Infrastructure.Sql.DataContexts;

#nullable disable

namespace TchotchomereCore.Infrastructure.Sql.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240324072610_AddFilmMovieAndDataDownloadAsEntities")]
    partial class AddFilmMovieAndDataDownloadAsEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TchotchomereCore.Domain.Entities.DataDownload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("EpisodeTV")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("FilmId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Magnet")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("SeasonTV")
                        .HasColumnType("int");

                    b.Property<Guid?>("SerieId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("SerieId");

                    b.ToTable("DataDownload");
                });

            modelBuilder.Entity("TchotchomereCore.Domain.Entities.ExtractedURL", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Html")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ProcessedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Trace")
                        .HasColumnType("char(36)");

                    b.Property<string>("URLHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BaseUrl");

                    b.HasIndex("ProcessedDateTime");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("ExtractedURL");
                });

            modelBuilder.Entity("TchotchomereCore.Domain.Entities.Film", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Film");
                });

            modelBuilder.Entity("TchotchomereCore.Domain.Entities.InitialURL", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ProcessedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("InitialURL");
                });

            modelBuilder.Entity("TchotchomereCore.Domain.Entities.Serie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Serie");
                });

            modelBuilder.Entity("TchotchomereCore.Domain.Entities.Subtitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DownloadText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("FilmId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("SerieId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("SerieId");

                    b.ToTable("Subtitle");
                });

            modelBuilder.Entity("TchotchomereCore.Domain.Entities.DataDownload", b =>
                {
                    b.HasOne("TchotchomereCore.Domain.Entities.Film", null)
                        .WithMany("Downloads")
                        .HasForeignKey("FilmId");

                    b.HasOne("TchotchomereCore.Domain.Entities.Serie", null)
                        .WithMany("Downloads")
                        .HasForeignKey("SerieId");
                });

            modelBuilder.Entity("TchotchomereCore.Domain.Entities.Film", b =>
                {
                    b.OwnsOne("TchotchomereCore.Domain.ValueObjects.ImdbData", "ImdbData", b1 =>
                        {
                            b1.Property<Guid>("FilmId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("BackdropPicture")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("BackdropPicture");

                            b1.Property<string>("Date")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Date");

                            b1.Property<string>("IDIMDb")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("IDIMDb");

                            b1.Property<int>("IDTheMovieDB")
                                .HasColumnType("int")
                                .HasColumnName("IDTheMovieDB");

                            b1.Property<string>("PosterPicture")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("PosterPicture");

                            b1.HasKey("FilmId");

                            b1.ToTable("Film");

                            b1.WithOwner()
                                .HasForeignKey("FilmId");
                        });

                    b.Navigation("ImdbData")
                        .IsRequired();
                });

            modelBuilder.Entity("TchotchomereCore.Domain.Entities.Serie", b =>
                {
                    b.OwnsOne("TchotchomereCore.Domain.ValueObjects.ImdbData", "ImdbData", b1 =>
                        {
                            b1.Property<Guid>("SerieId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("BackdropPicture")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("BackdropPicture");

                            b1.Property<string>("Date")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Date");

                            b1.Property<string>("IDIMDb")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("IDIMDb");

                            b1.Property<int>("IDTheMovieDB")
                                .HasColumnType("int")
                                .HasColumnName("IDTheMovieDB");

                            b1.Property<string>("PosterPicture")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("PosterPicture");

                            b1.HasKey("SerieId");

                            b1.ToTable("Serie");

                            b1.WithOwner()
                                .HasForeignKey("SerieId");
                        });

                    b.Navigation("ImdbData")
                        .IsRequired();
                });

            modelBuilder.Entity("TchotchomereCore.Domain.Entities.Subtitle", b =>
                {
                    b.HasOne("TchotchomereCore.Domain.Entities.Film", null)
                        .WithMany("Subtitles")
                        .HasForeignKey("FilmId");

                    b.HasOne("TchotchomereCore.Domain.Entities.Serie", null)
                        .WithMany("Subtitles")
                        .HasForeignKey("SerieId");
                });

            modelBuilder.Entity("TchotchomereCore.Domain.Entities.Film", b =>
                {
                    b.Navigation("Downloads");

                    b.Navigation("Subtitles");
                });

            modelBuilder.Entity("TchotchomereCore.Domain.Entities.Serie", b =>
                {
                    b.Navigation("Downloads");

                    b.Navigation("Subtitles");
                });
#pragma warning restore 612, 618
        }
    }
}
